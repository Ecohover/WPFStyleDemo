<ComboBox   
    x:Class="MyStyle.Control.BlueComboBox"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:local="clr-namespace:MyStyle.Control"
    mc:Ignorable="d" 
    xmlns:command ="clr-namespace:MyStyle.Command">
    <ComboBox.Resources>
        <Style x:Key="ComboboxFocus">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="true" Stroke="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        
        <!-- ComboBox 定義 Start-->
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Background" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
            <Setter Property="Foreground" Value="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}"/>
            <Setter Property="BorderBrush" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
            <Setter Property="BorderThickness" Value="0.0"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid x:Name="markGrid">
                            <Rectangle x:Name="mask" 
                                   Fill="{TemplateBinding Background}"  
                                   Margin="0" 
                                   StrokeThickness="0" 
                                   RadiusX="4" RadiusY="4" 
                                   Opacity="0" 
                                   Panel.ZIndex="10"/>
                            <Border x:Name="templateRoot" 
                                    Background="{TemplateBinding Background}" 
                                    CornerRadius="4" 
                                    BorderThickness ="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="true">
                                <Border x:Name="splitBorder" 
                                    HorizontalAlignment="Right" 
                                    CornerRadius="4" 
                                    Margin="0" 
                                    SnapsToDevicePixels="true" 
                                    Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                    <Image x:Name="arrow" 
                                       Height="8" Width="8" 
                                       Source="pack://application:,,,/MyStyle;component/Image/ComboBox_DownArrow.png" Stretch="Uniform" 
                                       Margin="0"/>
                                </Border>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="mask" Value="0.8"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel2}" />
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel2}" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel2}" />
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="mask" Value="0.8"></Setter>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="mask" Value="0.8"></Setter>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="mask" Value="0.8"></Setter>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" 
              SnapsToDevicePixels="true"
              Height="{TemplateBinding Height}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                  Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" Grid.ColumnSpan="2"
                   AllowsTransparency="true"  
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                   Margin="1" 
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
                   Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" 
                                               Color="{x:Static command:MyCurrentStyleManager.BrushWindowBorderBrush}" 
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" 
                            BorderBrush="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}" 
                            BorderThickness="0.5" 
                            Background="{x:Static command:MyCurrentStyleManager.BrushWindowBackground}">
                            <ScrollViewer x:Name="DropDownScrollViewer" 
                                      Background="{x:Static command:MyCurrentStyleManager.BrushWindowBorderBrush}" 
                                      Foreground="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}">
                                <Grid x:Name="grid" 
                                  RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" 
                                        HorizontalAlignment="Left" VerticalAlignment="Top"
                                        Height="0" Width="0">
                                        <Rectangle x:Name="opaqueRect" 
                                               Fill="Transparent" 
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter"  
                                                    HorizontalAlignment="Center"
                                                    KeyboardNavigation.DirectionalNavigation="Contained" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Grid.ColumnSpan="2"
                          BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}" 
                          Background="{TemplateBinding Background}"  
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                          Style="{StaticResource ComboBoxToggleButton}"/>
                <Grid>
                    <ContentPresenter x:Name="contentPresenter" 
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  Content="{TemplateBinding SelectionBoxItem}"
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  IsHitTestVisible="false" Margin="{TemplateBinding Padding}" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}" >
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
            <Setter Property="Foreground" Value="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}"/>
            <Setter Property="BorderBrush" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
            <Setter Property="BorderThickness" Value="0.0"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Border x:Name="border" 
                                VerticalAlignment="Center" 
                                Margin="0" CornerRadius="4,0,0,4" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True" 
                                Panel.ZIndex="5" >
                                <ScrollViewer x:Name="PART_ContentHost" 
                                          Focusable="false"
                                          HorizontalScrollBarVisibility="Hidden" 
                                          VerticalScrollBarVisibility="Hidden"/>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" 
              SnapsToDevicePixels="true"
              Height="{TemplateBinding Height}"
              Margin="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                  Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" 
                   AllowsTransparency="true" 
                   Margin="1" 
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
                   Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" 
                                               Color="{x:Static command:MyCurrentStyleManager.BrushWindowBorderBrush}" 
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" 
                            BorderBrush="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}" 
                            BorderThickness="0.5" 
                            Background="{x:Static command:MyCurrentStyleManager.BrushWindowBackground}">
                            <ScrollViewer x:Name="DropDownScrollViewer" 
                                      Background="{x:Static command:MyCurrentStyleManager.BrushWindowBorderBrush}" 
                                      Foreground="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}">
                                <Grid x:Name="grid" 
                                  RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" 
                                        HorizontalAlignment="Left" 
                                        VerticalAlignment="Top" 
                                        Height="0" Width="0">
                                        <Rectangle x:Name="opaqueRect" 
                                               Fill="Transparent" 
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>

                <ToggleButton x:Name="toggleButton"  Grid.ColumnSpan="2"
                          BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}" 
                          Background="{TemplateBinding Background}" 
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                          Style="{StaticResource ComboBoxToggleButton}"/>
                <Grid>
                    <TextBox x:Name="PART_EditableTextBox"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Margin="0" 
                         Padding="0"
                         Style="{StaticResource ComboBoxEditableTextBox}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="Opacity" TargetName="PART_EditableTextBox" Value="0.8"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Opacity" TargetName="PART_EditableTextBox" Value="0.8"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="BlueComboBox"  TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ComboboxFocus}"/>
            <Setter Property="Background" Value="{x:Static command:MyCurrentStyleManager.BrushButtonBlue}"/>
            <Setter Property="Foreground" Value="{x:Static command:MyCurrentStyleManager.BrushWindowForeground}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="6,4,5,4"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource ComboboxFocus}"/>
            <Setter Property="Background" Value="{x:Static command:MyCurrentStyleManager.BrushWindowTitleBackground}"/>
            <Setter Property="BorderBrush" Value="{x:Static command:MyCurrentStyleManager.BrushWindowBorderBrush}"/>
            <Setter Property="BorderThickness" Value="0.5"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border Name="Border"
                            BorderBrush ="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="0"
                            CornerRadius="0">
                            <Grid>
                                <Rectangle Margin="0"
                                       Fill="{x:Static command:MyCurrentStyleManager.BrushWindowBackground}"/>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="7"/>
                                        <ColumnDefinition Width="5"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle x:Name="flag" Grid.Column="0"
                                       Width="7"
                                       Height="15"
                                       Fill="{x:Static command:MyCurrentStyleManager.BrushEvenTriggerLevel1}"
                                       Opacity="0"/>
                                    <!--<CheckBox Grid.Column="0"
                                      IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}"/>-->
                                    <TextBlock Grid.Column="2"
                                           TextAlignment="Left"
                                           Background="Transparent"
                                           Foreground="{TemplateBinding Foreground}">
                                <ContentPresenter/>
                                    </TextBlock>
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter TargetName="flag" Property="Opacity" Value="0.5"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="flag" Property="Opacity" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ComboBox 定義 End-->
    </ComboBox.Resources>
</ComboBox>
